Refactoring:
- eliminate target_architecture.h and replace with stuff in lang_features.h

Lexer:
- Add preprocessor code.
- proper handling of different file encodings, parsing non-ascii strings
- We could save some space by holding source positions in a separate (somehow
  compressed table) and only storing pointers to it on the AST.

Parser:
- disallow storage class specifiers in struct/union members
- add constant folding code (optional, ast2firm already does it)
- Refactor code, so code to handle number values (and strings?) is an own
  module and replacable
- Add columns to source positions
- SourcePositions could be stored selectively on expressions that really need
  them.
- check semantic for functions declared/defined in global scope and declared
  again in a local scope
- for errors relating to function argument, print number of argument
- print initialisation type_path for initializer errors

ast2firm:
- output source file positions for panics.
- handle bitfield members with 0 correctly (standard says they finish the
  current unit)

Missing Errors:
- goto over VLA declarations

Missing Warnings:
- dead assignments (int x = 5; x = bla(); -> dead assignment at x = 5;)
- catch the if(k = b) cases, maybe require all assignments to be in parentheses
  (but some few exceptions like toplevel, nested assignments)
 - warn when folding shift constants with too large shift amounts

main/driver:
- delete output file if we had an error
- go through gcc manual and emulate all the gcc flags...
